import React, { useState } from 'react';
import { View, Text, TextInput, StyleSheet, Modal, Image, TouchableOpacity, Keyboard } from 'react-native';
import CustomButton from './CustomButton';
import * as ImagePicker from 'expo-image-picker';  

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ Blur ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
const handleBlur = () => {
  Keyboard.dismiss();
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
const isValidImage = (url) => {
  return url.match(/\.(jpeg|jpg|gif|png)$/) != null;  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ
const chooseImage = async (setImage) => {
  const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
  if (status !== "granted") {
    alert("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ!");
    return;
  }

  const result = await ImagePicker.launchImageLibraryAsync({
    mediaTypes: ImagePicker.MediaTypeOptions.Images, 
    allowsEditing: true,
    aspect: [16, 9],
    quality: 1,
  });

  if (!result.canceled) {
    setImage(result.assets[0].uri);  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URI ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
  }
};

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå EditCardModal
const EditCardModal = ({ 
  visible, 
  onClose, 
  onSave, 
  title, 
  setTitle, 
  content, 
  setContent, 
  image, 
  setImage, 
  selectedCategory, 
  setSelectedCategory,  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  isDarkMode 
}) => {
  const [errors, setErrors] = useState({ title: '', content: '', image: '' });

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå
  const validateField = (field, value) => {
    let error = '';
    if (!value.trim()) {
      error = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô';
    } else if (field === 'content') {
      const numericValue = parseFloat(value);
      if (isNaN(numericValue) || numericValue < 0) {
        error = '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0';
      }
    }
    setErrors((prevErrors) => ({ ...prevErrors, [field]: error }));
    return error;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const saveChanges = () => {
    const titleError = validateField('title', title);
    const contentError = validateField('content', content);

    if (titleError || contentError) {
      return;
    }

    onSave(title, content, image, selectedCategory);
    onClose();
  };

  return (
    <Modal visible={visible} animationType="slide" transparent={true} onRequestClose={onClose}>
      <View style={[styles.modalContainer, isDarkMode && styles.darkModalContainer]}>
        <View style={[styles.modalContent, isDarkMode && styles.darkModalContent]}>
          <Text style={[styles.modalHeader, isDarkMode && styles.darkText]}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏∞</Text>

          <TextInput
            style={[styles.input, isDarkMode && styles.darkInput]}
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡πâ‡∏∞"
            value={title}
            onChangeText={setTitle}
            placeholderTextColor={isDarkMode ? '#fff' : '#000'}
            onBlur={handleBlur}
          />
          {errors.title && <Text style={styles.errortext}>{errors.title}</Text>}

          <TextInput
            style={[styles.input, isDarkMode && styles.darkInput]}
            placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡πâ‡∏∞"
            value={content}
            onChangeText={setContent}
            keyboardType="numeric"
            placeholderTextColor={isDarkMode ? '#fff' : '#000'}
            onBlur={handleBlur}
          />
          {errors.content && <Text style={styles.errortext}>{errors.content}</Text>}

          <TextInput
            style={[styles.textArea, isDarkMode && styles.darkInput]}
            placeholder="‡πÉ‡∏™‡πà URL ‡∏†‡∏≤‡∏û‡∏à‡πâ‡∏∞ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏à‡πâ‡∏∞)"
            value={image}
            onChangeText={setImage}
            placeholderTextColor={isDarkMode ? '#fff' : '#000'}
            onBlur={handleBlur}
          />

          {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
          <View style={styles.categoryContainer}>
            {['‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á'].map((item) => (
              <TouchableOpacity
                key={item}
                style={[ 
                  styles.categoryButton,
                  isDarkMode 
                    ? selectedCategory === item 
                      ? { backgroundColor: '#b8b8b8', borderColor: '#b8b8b8', opacity: 1 }
                      : { backgroundColor: '#333', borderColor: '#b8b8b8', opacity: 0.5 }
                    : selectedCategory === item 
                      ? { backgroundColor: '#5f8494', borderColor: '#5f8494', opacity: 1 }
                      : { backgroundColor: '#fff', borderColor: '#5f8494', opacity: 0.5 }
                ]}
                onPress={() => setSelectedCategory(item)}
              >
                <Text
                  style={[
                    styles.categoryText,
                    isDarkMode
                      ? selectedCategory === item
                        ? { color: '#000', fontWeight: 'bold' }
                        : { color: '#ccc' }
                      : selectedCategory === item
                        ? { color: '#fff', fontWeight: 'bold' }
                        : { color: '#333' }
                  ]}
                >
                  {item}
                </Text>
              </TouchableOpacity>
            ))}
          </View>

          <CustomButton title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏à‡πâ‡∏∞" onPress={() => chooseImage(setImage)} backgroundColor={isDarkMode ? "#5f8494" : "#969696"} />

          {image && isValidImage(image) ? (
            <Image source={{ uri: image }} style={styles.image} />
          ) : image ? (
            <Text style={styles.errortext}>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</Text>
          ) : null}

          <CustomButton title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡πâ‡∏∞" onPress={saveChanges} backgroundColor={isDarkMode ? "#969696" : "#5f8494"} />
          <CustomButton title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏à‡πâ‡∏∞" onPress={onClose} backgroundColor={isDarkMode ? "#b32d2d" : "#e64949"} />
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  darkModalContainer: {
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 20,
    width: '80%',
    elevation: 10,
  },
  darkModalContent: {
    backgroundColor: '#333',
  },
  modalHeader: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  darkText: {
    color: '#fff',
  },
  input: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,
    padding: 10,
    fontSize: 14,
    marginBottom: 10,
  },
  darkInput: {
    backgroundColor: '#444',
    borderColor: '#666',
    color: '#fff',
  },
  textArea: {
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,
    padding: 10,
    fontSize: 14,
    marginBottom: 10,
    height: 50,
  },
  image: {
    width: 320,
    height: 150,
    borderRadius: 10,
    marginBottom: 10,
    alignSelf: 'center',
  },
  errortext: {
    color: 'red',
    fontSize: 12,
  },
  categoryContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 10,
  },
  categoryButton: {
    paddingVertical: 8,
    paddingHorizontal: 20,
    borderRadius: 30,
    borderWidth: 3,
    borderColor: '#5f8494',
    backgroundColor: '#fff',
    width: '30%',
    textAlign: 'center',
  },
  categoryText: {
    color: '#333',
    fontSize: 16,
    textAlign: 'center',
  },
  imagePickerButton: {
    backgroundColor: "#ddd",
    padding: 10,
    borderRadius: 10,
    marginBottom: 10,
    alignItems: "center",
  },
  imagePickerText: {
    color: "#333",
    fontSize: 14,
  },
});

export default EditCardModal;
